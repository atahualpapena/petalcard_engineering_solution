Petal Engineering Problem

Thank you for taking the time to interview with us. We hope this problem helps you to demonstrate some key skills we
look for to become successful at Petal. We'll focus on abstractions, code quality, organization, and correctness. Imagine that you're submitting your solution for a pull request that will be reviewed by a peer.
Feel free to use any libraries you'd normally use and any language you feel comfortable with. (Our system is primarily written in Python)

Write a script to process the transactions[1-3].csv files. 
These files each contain 100k bank and credit card transactions for ~100 users (not real Petal users). The files are sorted by user id, but not by anything else. Each row has 7 columns and is properly formatted (although you will need to infer the exact csv formatting params yourself).
1. User id
2. Account id (this column can be ignored)
3. Amount (this field should always be positive)
4. Random string with tricky characters to parse (where a transaction description would normally go)
5. Date
6. Type (debit/credit - debit means negative amount. credit means positive amount)
7. Another random string with tricky characters to parse


The desired output is a csv with the columns:
1. user_id
2. Number of of transactions for user
3. The sum of transaction amounts for the user (use exactly 2 decimal places). This is the same as the final balance.
4. The min balance (running sum) for the user at the end of any day (use exactly 2 decimal places). This value should be at most $0 since it starts there.
5. The max balance (running sum) for the user at the end of any day (use exactly 2 decimal places). This value should be at least $0 since it starts there.


Example:
10/15 credit $5
10/16 credit $3
10/17 nothing happens
10/18 debit $6
10/19 credit $10
10/19 debit $2
10/20 debit $1
For this user, the output should be:
        number of transactions: 6
        sum of transactions: 9
minimum balance: 0
maximum balance: 10 (Yes, it’s 10, not 12 because there are 2 transactions on 10/19)


WARNING! Please make sure you understand the above example. Specifically, why maximum balance is 10.


The output should only include one row per user and with users in the original input order.
Use the header: “user_id,n,sum,min,max” and don’t use any extra whitespace so we can easily run a diff with our reference solution.


Even though these example files are small, you should pretend they have too much data to fit in memory. But you can assume that the transactions for a single user will fit in memory. 


Common Pitfalls:
1. Don’t worry about handling users on the edges of files since they can span from the end of one file into the beginning of the next file.
2. The files are sorted by user id, but not by anything else. 
3. Make sure that all balances are output using exactly 2 decimal places.

Please submit a compressed files with the following:
1. Script(s) used to process the files
2. The output csv with one row per user
3. Instructions on how to run the script against the data

Finally, if you are completing this on your own time, please write down your own problem-solving thought process (these don't need to be
submitted.) Such as, some key decisions or tradeoffs you made, or approaches you took then abandoned.
We will likely ask you about them later on in the interview process.
